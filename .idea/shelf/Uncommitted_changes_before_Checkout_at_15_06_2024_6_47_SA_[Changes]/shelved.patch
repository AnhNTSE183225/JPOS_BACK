Index: src/main/java/com/fpt/jpos/config/SecurityConfiguration.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.fpt.jpos.config;\r\n\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.security.authentication.AuthenticationProvider;\r\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\r\nimport org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;\r\nimport org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;\r\nimport org.springframework.security.config.http.SessionCreationPolicy;\r\nimport org.springframework.security.web.SecurityFilterChain;\r\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\r\n\r\n@Configuration\r\n@EnableWebSecurity\r\n@RequiredArgsConstructor\r\npublic class SecurityConfiguration {\r\n\r\n    private final JwtAuthenticationFilter jwtAuthFilter;\r\n    private final AuthenticationProvider authenticationProvider;\r\n\r\n    @Bean\r\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\r\n\r\n        http\r\n                .csrf(AbstractHttpConfigurer::disable)\r\n                .authorizeRequests()\r\n                .requestMatchers(\"api/v1/auth/**\")// allowing all the method\r\n                .permitAll()\r\n                .anyRequest()\r\n                .authenticated()\r\n                .and()\r\n                .sessionManagement(httpSecuritySessionManagementConfigurer -> httpSecuritySessionManagementConfigurer.sessionCreationPolicy(SessionCreationPolicy.STATELESS))// tell spring to create a new session for each request\r\n                .authenticationProvider(authenticationProvider)\r\n                .addFilterBefore(jwtAuthFilter, UsernamePasswordAuthenticationFilter.class);\r\n        return http.build();\r\n\r\n    }\r\n\r\n\r\n}\r\n
===================================================================
diff --git a/src/main/java/com/fpt/jpos/config/SecurityConfiguration.java b/src/main/java/com/fpt/jpos/config/SecurityConfiguration.java
--- a/src/main/java/com/fpt/jpos/config/SecurityConfiguration.java	
+++ b/src/main/java/com/fpt/jpos/config/SecurityConfiguration.java	
@@ -6,11 +6,11 @@
 import org.springframework.security.authentication.AuthenticationProvider;
 import org.springframework.security.config.annotation.web.builders.HttpSecurity;
 import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
-import org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;
-import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
 import org.springframework.security.config.http.SessionCreationPolicy;
 import org.springframework.security.web.SecurityFilterChain;
 import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
+import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
+
 
 @Configuration
 @EnableWebSecurity
@@ -22,21 +22,19 @@
 
     @Bean
     public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
-
         http
-                .csrf(AbstractHttpConfigurer::disable)
-                .authorizeRequests()
-                .requestMatchers("api/v1/auth/**")// allowing all the method
-                .permitAll()
-                .anyRequest()
-                .authenticated()
-                .and()
-                .sessionManagement(httpSecuritySessionManagementConfigurer -> httpSecuritySessionManagementConfigurer.sessionCreationPolicy(SessionCreationPolicy.STATELESS))// tell spring to create a new session for each request
+                .csrf(AbstractHttpConfigurer::disable) // disable csrf
+                .authorizeHttpRequests(authorize -> authorize
+                        .requestMatchers("/login", "/public/**").permitAll()
+                        .requestMatchers("/admin/**").hasRole("ADMIN")
+                        .requestMatchers("/staff/**").hasRole("STAFF")
+                        .requestMatchers("/customer/**").hasRole("CUSTOMER")
+                        .anyRequest().authenticated())
+                .sessionManagement(sessionManagementCustomizer ->
+                        sessionManagementCustomizer.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
                 .authenticationProvider(authenticationProvider)
                 .addFilterBefore(jwtAuthFilter, UsernamePasswordAuthenticationFilter.class);
+
         return http.build();
-
     }
-
-
 }
Index: src/main/java/com/fpt/jpos/auth/RegisterRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.fpt.jpos.auth;\r\n\r\n\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Builder;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\n\r\n@Data\r\n@Builder\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\npublic class RegisterRequest {\r\n\r\n    private String username;\r\n    private String password;\r\n}\r\n
===================================================================
diff --git a/src/main/java/com/fpt/jpos/auth/RegisterRequest.java b/src/main/java/com/fpt/jpos/auth/RegisterRequest.java
--- a/src/main/java/com/fpt/jpos/auth/RegisterRequest.java	
+++ b/src/main/java/com/fpt/jpos/auth/RegisterRequest.java	
@@ -11,7 +11,6 @@
 @AllArgsConstructor
 @NoArgsConstructor
 public class RegisterRequest {
-
     private String username;
     private String password;
 }
